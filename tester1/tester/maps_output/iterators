
Code executed:
¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯
const int range_int[] = {1485, 5, 89, 652, -94};
const std::string range_str[] = {"One", "Two", "Three", "Four", "Five"};
ft::map<int, std::string> ft_map;
for (int i = 0; i < 5; i++)
    ft_map.insert(ft::make_pair(range_int[i], range_str[i]));

Compared with:
¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯
const int range_int[] = {1485, 5, 89, 652, -94};
const std::string range_str[] = {"One", "Two", "Three", "Four", "Five"};
std::map<int, std::string> stl_map;
for (int i = 0; i < 5; i++)
    stl_map.insert(std::make_pair(range_int[i], range_str[i]));

══════════════════════════════════════════════════════════════
maps attributes : 
STL : 
Empty       : false
Size        : 5
Max size    : 288230376151711743
Content     : [
	[-94, Five], [5, Two], [89, Three], [652, Four], [1485, One], 

]

FT : 
Empty    [✔]: false
Size     [✔]: 5
Max size [✔]: 288230376151711743
Content  [✔]: [
	[-94, Five], [5, Two], [89, Three], [652, Four], [1485, One], 

]
══════════════════════════════════════════════════════════════

══════════════════════════════════════════════════════════════
Value from :
STL    : -94
FT  [✔]: -94
══════════════════════════════════════════════════════════════

══════════════════════════════════════════════════════════════
Value from :
STL    : Five
FT  [✔]: Five
══════════════════════════════════════════════════════════════

**************************************************************




Code executed:
¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯
const int range_int[] = {48, 9, 12, 63, 99};
const std::string range_str[] = {"One", "Two", "Three", "Four", "Five"};
ft::map<int, std::string> ft_map;
for (int i = 0; i < 5; i++)
    ft_map.insert(ft::make_pair(range_int[i], range_str[i]));
ft::map<int, std::string>::const_iterator ft_it = ft_map.begin();

Compared with:
¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯
const int range_int[] = {48, 9, 12, 63, 99};
const std::string range_str[] = {"One", "Two", "Three", "Four", "Five"};
std::map<int, std::string> stl_map;
for (int i = 0; i < 5; i++)
    stl_map.insert(std::make_pair(range_int[i], range_str[i]));
std::map<int, std::string>::const_iterator stl_it = stl_map.begin();

══════════════════════════════════════════════════════════════
maps attributes : 
STL : 
Empty       : false
Size        : 5
Max size    : 288230376151711743
Content     : [
	[9, Two], [12, Three], [48, One], [63, Four], [99, Five], 

]

FT : 
Empty    [✔]: false
Size     [✔]: 5
Max size [✔]: 288230376151711743
Content  [✔]: [
	[9, Two], [12, Three], [48, One], [63, Four], [99, Five], 

]
══════════════════════════════════════════════════════════════

══════════════════════════════════════════════════════════════
Value from :
STL    : 9
FT  [✔]: 9
══════════════════════════════════════════════════════════════

══════════════════════════════════════════════════════════════
Value from :
STL    : Two
FT  [✔]: Two
══════════════════════════════════════════════════════════════

**************************************************************




Code executed:
¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯
const int range_int[] = {-99, 584, 965, 366, 77};
const std::string range_str[] = {"One", "Two", "Three", "Four", "Five"};
ft::map<int, std::string> ft_map;
for (int i = 0; i < 5; i++)
    ft_map.insert(ft::make_pair(range_int[i], range_str[i]));
ft::map<int, std::string>::iterator ft_it = ft_map.end();
--ft_it;

Compared with:
¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯
const int range_int[] = {-99, 584, 965, 366, 77};
const std::string range_str[] = {"One", "Two", "Three", "Four", "Five"};
std::map<int, std::string> stl_map;
for (int i = 0; i < 5; i++)
    stl_map.insert(std::make_pair(range_int[i], range_str[i]));
std::map<int, std::string>::iterator stl_it = stl_map.end();
--stl_it;

══════════════════════════════════════════════════════════════
maps attributes : 
STL : 
Empty       : false
Size        : 5
Max size    : 288230376151711743
Content     : [
	[-99, One], [77, Five], [366, Four], [584, Two], [965, Three], 

]

FT : 
Empty    [✔]: false
Size     [✔]: 5
Max size [✔]: 288230376151711743
Content  [✔]: [
	[-99, One], [77, Five], [366, Four], [584, Two], [965, Three], 

]
══════════════════════════════════════════════════════════════

══════════════════════════════════════════════════════════════
Value from :
STL    : 965
FT  [✔]: 965
══════════════════════════════════════════════════════════════

══════════════════════════════════════════════════════════════
Value from :
STL    : Three
FT  [✔]: Three
══════════════════════════════════════════════════════════════

**************************************************************




Code executed:
¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯
const int range_int[] = {154, 966, 3, -84, 75};
const std::string range_str[] = {"One", "Two", "Three", "Four", "Five"};
ft::map<int, std::string> ft_map;
for (int i = 0; i < 5; i++)
    ft_map.insert(ft::make_pair(range_int[i], range_str[i]));
ft::map<int, std::string>::const_iterator ft_it = ft_map.end();
--ft_it;

Compared with:
¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯
const int range_int[] = {154, 966, 3, -84, 75};
const std::string range_str[] = {"One", "Two", "Three", "Four", "Five"};
std::map<int, std::string> stl_map;
for (int i = 0; i < 5; i++)
    stl_map.insert(std::make_pair(range_int[i], range_str[i]));
std::map<int, std::string>::const_iterator stl_it = stl_map.end();
--stl_it;

══════════════════════════════════════════════════════════════
maps attributes : 
STL : 
Empty       : false
Size        : 5
Max size    : 288230376151711743
Content     : [
	[-84, Four], [3, Three], [75, Five], [154, One], [966, Two], 

]

FT : 
Empty    [✔]: false
Size     [✔]: 5
Max size [✔]: 288230376151711743
Content  [✔]: [
	[-84, Four], [3, Three], [75, Five], [154, One], [966, Two], 

]
══════════════════════════════════════════════════════════════

══════════════════════════════════════════════════════════════
Value from :
STL    : 966
FT  [✔]: 966
══════════════════════════════════════════════════════════════

══════════════════════════════════════════════════════════════
Value from :
STL    : Two
FT  [✔]: Two
══════════════════════════════════════════════════════════════

**************************************************************




Code executed:
¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯
const int range_int[] = {1458, -985, 58, 632, 65};
const std::string range_str[] = {"One", "Two", "Three", "Four", "Five"};
ft::map<int, std::string> ft_map;
for (int i = 0; i < 5; i++)
    ft_map.insert(ft::make_pair(range_int[i], range_str[i]));
ft::map<int, std::string>::reverse_iterator ft_it = ft_map.rbegin();
++ft_it;

Compared with:
¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯
const int range_int[] = {1458, -985, 58, 632, 65};
const std::string range_str[] = {"One", "Two", "Three", "Four", "Five"};
std::map<int, std::string> stl_map;
for (int i = 0; i < 5; i++)
    stl_map.insert(std::make_pair(range_int[i], range_str[i]));
std::map<int, std::string>::reverse_iterator stl_it = stl_map.rbegin();
++stl_it;

══════════════════════════════════════════════════════════════
maps attributes : 
STL : 
Empty       : false
Size        : 5
Max size    : 288230376151711743
Content     : [
	[-985, Two], [58, Three], [65, Five], [632, Four], [1458, One], 

]

FT : 
Empty    [✔]: false
Size     [✔]: 5
Max size [✔]: 288230376151711743
Content  [✔]: [
	[-985, Two], [58, Three], [65, Five], [632, Four], [1458, One], 

]
══════════════════════════════════════════════════════════════

══════════════════════════════════════════════════════════════
Value from :
STL    : 632
FT  [✔]: 632
══════════════════════════════════════════════════════════════

══════════════════════════════════════════════════════════════
Value from :
STL    : Four
FT  [✔]: Four
══════════════════════════════════════════════════════════════

**************************************************************




Code executed:
¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯
const int range_int[] = {859, 99, -325, -65, -98};
const std::string range_str[] = {"One", "Two", "Three", "Four", "Five"};
ft::map<int, std::string> ft_map;
for (int i = 0; i < 5; i++)
    ft_map.insert(ft::make_pair(range_int[i], range_str[i]));
ft::map<int, std::string>::const_reverse_iterator ft_it = ft_map.rbegin();

Compared with:
¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯
const int range_int[] = {859, 99, -325, -65, -98};
const std::string range_str[] = {"One", "Two", "Three", "Four", "Five"};
std::map<int, std::string> stl_map;
for (int i = 0; i < 5; i++)
    stl_map.insert(std::make_pair(range_int[i], range_str[i]));
std::map<int, std::string>::const_reverse_iterator stl_it = stl_map.rbegin();

══════════════════════════════════════════════════════════════
maps attributes : 
STL : 
Empty       : false
Size        : 5
Max size    : 288230376151711743
Content     : [
	[-325, Three], [-98, Five], [-65, Four], [99, Two], [859, One], 

]

FT : 
Empty    [✔]: false
Size     [✔]: 5
Max size [✔]: 288230376151711743
Content  [✔]: [
	[-325, Three], [-98, Five], [-65, Four], [99, Two], [859, One], 

]
══════════════════════════════════════════════════════════════

══════════════════════════════════════════════════════════════
Value from :
STL    : 859
FT  [✔]: 859
══════════════════════════════════════════════════════════════

══════════════════════════════════════════════════════════════
Value from :
STL    : One
FT  [✔]: One
══════════════════════════════════════════════════════════════

**************************************************************




Code executed:
¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯
const int range_int[] = {325, -657, -942, -8, 66};
const std::string range_str[] = {"One", "Two", "Three", "Four", "Five"};
ft::map<int, std::string> ft_map;
for (int i = 0; i < 5; i++)
    ft_map.insert(ft::make_pair(range_int[i], range_str[i]));
ft::map<int, std::string>::reverse_iterator ft_it = ft_map.rend();
--ft_it;

Compared with:
¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯
const int range_int[] = {325, -657, -942, -8, 66};
const std::string range_str[] = {"One", "Two", "Three", "Four", "Five"};
std::map<int, std::string> stl_map;
for (int i = 0; i < 5; i++)
    stl_map.insert(std::make_pair(range_int[i], range_str[i]));
std::map<int, std::string>::reverse_iterator stl_it = stl_map.rend();
--stl_it;

══════════════════════════════════════════════════════════════
maps attributes : 
STL : 
Empty       : false
Size        : 5
Max size    : 288230376151711743
Content     : [
	[-942, Three], [-657, Two], [-8, Four], [66, Five], [325, One], 

]

FT : 
Empty    [✔]: false
Size     [✔]: 5
Max size [✔]: 288230376151711743
Content  [✔]: [
	[-942, Three], [-657, Two], [-8, Four], [66, Five], [325, One], 

]
══════════════════════════════════════════════════════════════

══════════════════════════════════════════════════════════════
Value from :
STL    : -942
FT  [✔]: -942
══════════════════════════════════════════════════════════════

══════════════════════════════════════════════════════════════
Value from :
STL    : Three
FT  [✔]: Three
══════════════════════════════════════════════════════════════

**************************************************************




Code executed:
¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯
const int range_int[] = {-99, 584, 965, 366, 77};
const std::string range_str[] = {"One", "Two", "Three", "Four", "Five"};
ft::map<int, std::string> ft_map;
for (int i = 0; i < 5; i++)
    ft_map.insert(ft::make_pair(range_int[i], range_str[i]));
ft::map<int, std::string>::const_reverse_iterator ft_it = ft_map.rend();
--(--ft_it);

Compared with:
¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯
const int range_int[] = {-99, 584, 965, 366, 77};
const std::string range_str[] = {"One", "Two", "Three", "Four", "Five"};
std::map<int, std::string> stl_map;
for (int i = 0; i < 5; i++)
    stl_map.insert(std::make_pair(range_int[i], range_str[i]));
std::map<int, std::string>::const_reverse_iterator stl_it = stl_map.rend();
--(--stl_it);

══════════════════════════════════════════════════════════════
maps attributes : 
STL : 
Empty       : false
Size        : 5
Max size    : 288230376151711743
Content     : [
	[-99, One], [77, Five], [366, Four], [584, Two], [965, Three], 

]

FT : 
Empty    [✔]: false
Size     [✔]: 5
Max size [✔]: 288230376151711743
Content  [✔]: [
	[-99, One], [77, Five], [366, Four], [584, Two], [965, Three], 

]
══════════════════════════════════════════════════════════════

══════════════════════════════════════════════════════════════
Value from :
STL    : 77
FT  [✔]: 77
══════════════════════════════════════════════════════════════

══════════════════════════════════════════════════════════════
Value from :
STL    : Five
FT  [✔]: Five
══════════════════════════════════════════════════════════════

**************************************************************



