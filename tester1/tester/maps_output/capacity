
Code executed:
¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯
ft::map<int, std::string> ft_default_map;

Compared with:
¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯
std::map<int, std::string> stl_default_map;

══════════════════════════════════════════════════════════════
maps attributes : 
STL : 
Empty       : true
Size        : 0
Max size    : 288230376151711743
Content     : [

]

FT : 
Empty    [✔]: true
Size     [✔]: 0
Max size [✔]: 288230376151711743
Content  [✔]: [

]
══════════════════════════════════════════════════════════════

Bool result : 
 - STL : true
 - FT  : true

**************************************************************




Code executed:
¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯
const int range_int[] = {1452, 3651, -98, 84, 899};
const std::string range_str[] = {"One", "Two", "Three", "Four", "Five"};
ft::map<int, std::string> ft_map;
for (int i = 0; i < 5; i++)
    ft_map.insert(ft::make_pair(range_int[i], range_str[i]));

Compared with:
¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯
const int range_int[] = {1452, 3651, -98, 84, 899};
const std::string range_str[] = {"One", "Two", "Three", "Four", "Five"};
std::map<int, std::string> stl_map;
for (int i = 0; i < 5; i++)
    stl_map.insert(std::make_pair(range_int[i], range_str[i]));

══════════════════════════════════════════════════════════════
maps attributes : 
STL : 
Empty       : false
Size        : 5
Max size    : 288230376151711743
Content     : [
	[-98, Three], [84, Four], [899, Five], [1452, One], [3651, Two], 

]

FT : 
Empty    [✔]: false
Size     [✔]: 5
Max size [✔]: 288230376151711743
Content  [✔]: [
	[-98, Three], [84, Four], [899, Five], [1452, One], [3651, Two], 

]
══════════════════════════════════════════════════════════════

Bool result : 
 - STL : false
 - FT  : false

**************************************************************




Code executed:
¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯
const int range_int[] = {9, -84, -45, -67, -9};
const std::string range_str[] = {"One", "Two", "Three", "Four", "Five"};
ft::map<int, std::string> ft_map;
for (int i = 0; i < 5; i++)
    ft_map.insert(ft::make_pair(range_int[i], range_str[i]));
Sending output...
ft_map.insert(ft::make_pair(42, "Represent"));

Compared with:
¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯
const int range_int[] = {9, -84, -45, -67, -9};
const std::string range_str[] = {"One", "Two", "Three", "Four", "Five"};
std::map<int, std::string> stl_map;
for (int i = 0; i < 5; i++)
    stl_map.insert(std::make_pair(range_int[i], range_str[i]));
Sending output...
stl_map.insert(std::make_pair(42, "Represent"));

══════════════════════════════════════════════════════════════
maps attributes : 
STL : 
Empty       : false
Size        : 5
Max size    : 288230376151711743
Content     : [
	[-84, Two], [-67, Four], [-45, Three], [-9, Five], [9, One], 

]

FT : 
Empty    [✔]: false
Size     [✔]: 5
Max size [✔]: 288230376151711743
Content  [✔]: [
	[-84, Two], [-67, Four], [-45, Three], [-9, Five], [9, One], 

]
══════════════════════════════════════════════════════════════

══════════════════════════════════════════════════════════════
Value from :
STL    : 5
FT  [✔]: 5
══════════════════════════════════════════════════════════════

══════════════════════════════════════════════════════════════
Value from :
STL    : 6
FT  [✔]: 6
══════════════════════════════════════════════════════════════

**************************************************************




Code executed:
¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯
ft::map<int, std::string> ft_default_map;

Compared with:
¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯
std::map<int, std::string> stl_default_map;

══════════════════════════════════════════════════════════════
maps attributes : 
STL : 
Empty       : true
Size        : 0
Max size    : 288230376151711743
Content     : [

]

FT : 
Empty    [✔]: true
Size     [✔]: 0
Max size [✔]: 288230376151711743
Content  [✔]: [

]
══════════════════════════════════════════════════════════════

══════════════════════════════════════════════════════════════
Value from :
STL    : 288230376151711743
FT  [✔]: 288230376151711743
══════════════════════════════════════════════════════════════

**************************************************************



